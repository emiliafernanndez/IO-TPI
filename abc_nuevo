import pandas as pd
import os

def clean_ingredient_data(input_file, output_file='cleaned_ingredient_data.csv'):
    """
    Limpia los datos de ingredientes desde un archivo CSV y guarda el resultado en otro archivo.

    Parámetros:
    - input_file (str): Ruta al archivo CSV de ingredientes a limpiar.
    - output_file (str): Ruta del archivo CSV de salida con los datos limpios.
    
    Devuelve:
    - pd.DataFrame: DataFrame limpio de ingredientes.
    """
    # Cargar el archivo con codificación UTF-8
    data = pd.read_csv(input_file, encoding='utf-8-sig')

    # Eliminar columnas vacías
    data.dropna(axis=1, how='all', inplace=True)

    # Lista de nuevos nombres para las columnas
    nuevos_nombres = [
        "TRADITIONAL BAGUETTE", "FORMULE SANDWICH", "CROISSANT", "PAIN AU CHOCOLAT", "BANETTE",
        "BAGUETTE", "SANDWICH COMPLET", "SPECIAL BREAD TRAITEUR", "GRAND FAR BRETON", "TARTELETTE",
        "CEREAL BAGUETTE", "VIK BREAD", "BRIOCHE", "GD KOUIGN AMANN", "CAMPAGNE", "BOULE 400G",
        "ECLAIR", "MOISSON", "SAND JB EMMENTAL", "COMPLET", "KOUIGN AMANN", "PAIN BANETTE",
        "DIVERS VIENNOISERIE", "FINANCIER X5"
    ]

    # Renombrar columnas (dejando la primera columna intacta)
    data.columns = [data.columns[0]] + nuevos_nombres

    # Establecer la primera columna como índice antes de transponer
    data.set_index(data.columns[0], inplace=True)

    # Transponer el DataFrame y rellenar valores nulos con 0
    data = data.T.fillna(0)

    # Crear el directorio de salida si no existe
    output_dir = os.path.dirname(output_file)
    if output_dir and not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Guardar el DataFrame limpio
    data.to_csv(output_file)
    print(f'Datos limpiados guardados en {output_file}')
    
    return data

def calculate_total_ingredients(sales_file, ingredients_file, output_file='total_ingredients.csv'):
    """
    Calcula el total de ingredientes necesarios en base a las ventas de productos de clase A.

    Parámetros:
    - sales_file (str): Ruta al archivo de ventas.
    - ingredients_file (str): Ruta al archivo de ingredientes limpios.
    - output_file (str): Ruta del archivo de salida con los ingredientes totales.
    
    Devuelve:
    - pd.DataFrame: DataFrame con el total de ingredientes requeridos.
    """
    # Cargar datos de ventas y de ingredientes
    sales_data = pd.read_csv(sales_file)
    ingredients_data = pd.read_csv(ingredients_file, index_col=0)

    # Filtrar productos de clase A
    class_a_products = ingredients_data.index
    filtered_sales = sales_data[sales_data['article'].isin(class_a_products)]

    # Agrupar y sumar la cantidad total vendida de cada producto
    total_sales = filtered_sales.groupby('article')['Quantity'].sum()

    # Calcular el total de ingredientes necesarios
    total_ingredients = ingredients_data.mul(total_sales, axis=0).sum(axis=1)

    # Guardar el resultado en un archivo CSV
    total_ingredients.to_csv(output_file, header=["Required Amount"])
    print(f"Archivo '{output_file}' generado con el total de ingredientes necesarios.")
    
    return total_ingredients

def abc_analysis_ingredients(file_path, output_path):
    """
    Realiza un análisis ABC sobre los insumos requeridos.

    Parámetros:
    - file_path (str): Ruta al archivo CSV con los datos de insumos totales.
    - output_path (str): Ruta donde se guardará el resultado del análisis ABC.
    
    Devuelve:
    - pd.DataFrame: DataFrame con los insumos clasificados en categorías A, B y C.
    """
    # Cargar datos de ingredientes totales
    data = pd.read_csv(file_path, index_col=0)

    # Calcular la cantidad total utilizada de cada insumo
    data['Total_Quantity'] = data.sum(axis=1)

    # Ordenar insumos por cantidad total en orden descendente
    data_sorted = data[['Total_Quantity']].sort_values(by='Total_Quantity', ascending=False)

    # Calcular porcentaje acumulado
    total_sum = data_sorted['Total_Quantity'].sum()
    data_sorted['Cumulative_Percentage'] = data_sorted['Total_Quantity'].cumsum() / total_sum * 100

    # Asignar categorías ABC usando pd.cut
    data_sorted['Category'] = pd.cut(data_sorted['Cumulative_Percentage'], bins=[0, 80, 95, 100], labels=['A', 'B', 'C'])

    # Guardar el resultado en un archivo CSV
    data_sorted.to_csv(output_path)
    print(f"Análisis ABC guardado en {output_path}")
    return data_sorted

# Ejecución del flujo completo
input_file = 'Ingredientes.csv'
sales_file = 'clean_sales_data.csv'
output_ingredients = 'cleaned_ingredient_data.csv'
total_ingredients_file = 'total_ingredients.csv'
abc_output_file = 'ingredients_abc.csv'

clean_ingredient_data(input_file, output_ingredients)
calculate_total_ingredients(sales_file, output_ingredients, total_ingredients_file)
abc_analysis_ingredients(total_ingredients_file, abc_output_file)
